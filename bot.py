import asyncio
import logging

from aiogram import Bot
from aiogram import Dispatcher
from aiogram import types
from aiogram.filters import CommandStart, Command
from aiogram.utils import markdown  #–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π(–≤–∏–¥–µ–æ 2)
from aiogram.enums import ParseMode #–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π(–≤–∏–¥–µ–æ 2)
import config


#–°–û–û–ë–©–ï–ù–ò–Ø –û–ë–†–ê–ë–ê–¢–´–í–ê–Æ–¢–°–Ø –°–í–ï–†–•–£ –í–ù–ò–ó
dp = Dispatcher()#–ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è


@dp.message(CommandStart())
async def handle_start(message: types.Message):
    text = markdown.text(

        markdown.text(markdown.bold((message.from_user.full_name)), f"–ø—Ä–∏–≤–µ—ÇüòÉ\\!"),
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç",
        f"–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å\\.\\.\\.\n ",
        sep="\n"
    )
    # fullname = message.from_user.full_name
    # lenght_name = len(fullname)
    # text = (f"{message.from_user.full_name}, –ø—Ä–∏–≤–µ—ÇüòÉ! \n"
    #                           f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç\n"
    #                           f"–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å...\n ")
    # entity_bold = types.MessageEntity(type= "bold", offset=0, length=lenght_name)
    # entities = [entity_bold]
    await message.answer(text = text, parse_mode=ParseMode.MARKDOWN_V2)



@dp.message(Command("help"))
async def handle_help(message: types.Message):
    text = markdown.text(
        "ü§ñ–Ø –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –ø–∏—Ç–∞–Ω–∏—è",
        "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ü–µ–ª—å\\:",
        markdown.text(
            markdown.bold("–ü–æ—Ö—É–¥–µ–Ω–∏–µ")
        ),
        markdown.text(
            markdown.bold("–ù–∞–±–æ—Ä –º–∞—Å—Å—ã")
        ),
        markdown.text(
            markdown.bold("–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞")
        ),
        "–í–≤–µ–¥–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—É—á–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\\.",
        sep="\n"
    )
    await message.answer(text=text, parse_mode=ParseMode.MARKDOWN_V2)


@dp.message()
async def echo_message(message: types.Message):
    # await bot.send_message(
    #     chat_id=message.chat.id,
    #     text= "Wait a second... ",
    # )
    # await message.reply(text=message.text) #–æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    # await message.answer(text= message.text) #–±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.text:
        await message.answer(
            text=message.text,
            entities=message.entities,
        )
    elif message.sticker:
        await message.reply_sticker(sticker=message.sticker.file_id)
    else:
        await message.reply(text="This is wrong data")



async def main():
    logging.basicConfig(level=logging.INFO)
    bot = Bot(token=config.BOT_TOKEN)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
