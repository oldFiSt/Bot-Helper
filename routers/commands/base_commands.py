from aiogram import Router, Dispatcher, types, F
from aiogram.enums import ParseMode, ChatAction
from aiogram.filters import CommandStart, Command
from aiogram.utils import markdown
from func_kbjy import calculate_kbju

from keyboards.common_keyboard import ButtonText, get_on_start_kb, get_on_kby_kb
from keyboards.inline_keyboard.info_kb import create_info_kb
from keyboards.common_keyboard import DOWN
from aiogram.types import CallbackQuery

from keyboards.inline_keyboard.actions_cb import create_action_kb
from keyboards.common_keyboard import ButtonText
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup

from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove

from Data_Base.connect import db



dp = Dispatcher()#–ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
router = Router()


class UserStates(StatesGroup):
    waiting_height = State()
    waiting_weight = State()
    waiting_age = State()
    waiting_gender = State()


@router.message(CommandStart())
async def handle_start(message: types.Message):
    user_data = db.get_user(message.from_user.id)

    if user_data:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ
        welcome_text = markdown.text(
            markdown.text(markdown.bold((message.from_user.full_name)), f"\\,—Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–ºüòÉ\\!"),
            f"–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞\\!",
            f"–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\\:",
            markdown.text(f"‚Ä¢ –†–æ—Å—Ç\\: {user_data['height']} —Å–º"),
            markdown.text(f"‚Ä¢ –í–µ—Å\\: {user_data['weight']} –∫–≥"),
            markdown.text(f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç\\: {user_data['age']} –ª–µ—Ç"),
            markdown.text(f"‚Ä¢ –ü–æ–ª\\: {user_data['gender']}"),
            f"–î–ª—è –Ω–æ–≤—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ö–ë–ñ–£ –Ω–∏–∂–µ‚¨áÔ∏è",
            sep="\n"
        )
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        welcome_text = markdown.text(
            markdown.text(markdown.bold((message.from_user.full_name)), f"\\,–ø—Ä–∏–≤–µ—ÇüòÉ\\!"),
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç",
            f"–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –ø–∏—Ç–∞–Ω–∏–µ\\.\\.\\.",
            f"–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π —Ä–∞—Å—Å–∏—á—Ç–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –ö–ë–ñ–£",
            f"–¥–ª—è —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö\\.",
            f"–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ‚¨áÔ∏è",
            sep="\n"
        )


    markup = get_on_start_kb()
    text = welcome_text
    await message.answer(text = text, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=markup,)


@router.message(F.text == ButtonText.KBY)
async def handle_kby(message: types.Message):
    markup = get_on_kby_kb()
    text = markdown.text(
        "–î–∞–≤–∞–π —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º —Ç–≤–æ—ë –ö–ë–ñ–£ ",

        "–î–ª—è —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ü–µ–ª—å\\:",
        markdown.text(
            markdown.bold("–ü–æ—Ö—É–¥–µ–Ω–∏–µ")
        ),
        markdown.text(
            markdown.bold("–ù–∞–±–æ—Ä –º–∞—Å—Å—ã")
        ),
        markdown.text(
            markdown.bold("–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞")
        ),
        sep="\n"
    )
    await message.answer(text=text, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=markup)

#–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
# @router.message(F.text == ButtonText.CLOZE)
# async def handle_close(message: types.Message):
#     await message.answer(
#         text= "–í—ã –∑–∞–∫—Ä—ã–ª–∏ –æ–∫–Ω–æ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start",
#         reply_markup=ReplyKeyboardRemove(),
#     )


@router.message(F.text == ButtonText.LOSS)
async def handle_loss(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer(text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º)")
    await state.set_state(UserStates.waiting_height)

@router.message(F.text == ButtonText.UP)
async def handle_gain(message: types.Message, state: FSMContext):
    await state.update_data(goal='gain')
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    await state.set_state(UserStates.waiting_height)

@router.message(F.text == ButtonText.CURRENT)
async def handle_maintain(message: types.Message, state: FSMContext):
    await state.update_data(goal='maintain')
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    await state.set_state(UserStates.waiting_height)



@router.message(UserStates.waiting_height)
async def process_height(message: types.Message, state: FSMContext):
    try:
        height = int(message.text)
        if height < 50 or height > 250:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (50-250 —Å–º):")
            return

        await state.update_data(height=height)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
        await state.set_state(UserStates.waiting_weight)

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–æ—Å—Ç–∞:")


@router.message(UserStates.waiting_weight)
async def process_weight(message: types.Message, state: FSMContext):
    try:
        weight = float(message.text)
        if weight < 20 or weight > 300:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (20-300 –∫–≥):")
            return

        await state.update_data(weight=weight)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
        await state.set_state(UserStates.waiting_age)

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –≤–µ—Å–∞:")


@router.message(UserStates.waiting_age)
async def process_age(message: types.Message, state: FSMContext):
    try:
        age = int(message.text)
        if age < 1 or age > 120:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (1-120 –ª–µ—Ç):")
            return

        await state.update_data(age=age)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
        gender_markup = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ú—É–∂—Å–∫–æ–π"), KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=gender_markup)
        await state.set_state(UserStates.waiting_gender)

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞:")


@router.message(UserStates.waiting_gender)
async def process_gender(message: types.Message, state: FSMContext):
    gender = message.text.lower()

    if gender not in ['–º—É–∂—Å–∫–æ–π', '–∂–µ–Ω—Å–∫–∏–π', 'male', 'female']:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: –º—É–∂—Å–∫–æ–π –∏–ª–∏ –∂–µ–Ω—Å–∫–∏–π")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    height = user_data.get('height')
    weight = user_data.get('weight')
    age = user_data.get('age')
    goal = user_data.get('goal', 'maintain')

    db.add_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        full_name=message.from_user.full_name,
        height=height,
        weight=weight,
        age=age,
        gender=gender,
        goal=goal
    )

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ö–ë–ñ–£
    kbju_data = calculate_kbju(
        height=height,
        weight=weight,
        age=age,
        gender='male' if gender == '–º—É–∂—Å–∫–æ–π' else 'female',
        goal=goal
    )

    goal_texts = {
        'loss': '–ø–æ—Ö—É–¥–µ–Ω–∏—è',
        'gain': '–Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã',
        'maintain': '–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≤–µ—Å–∞'
    }

    response = (
        f"üèÜ –í–∞—à–∞ —Å—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –ö–ë–ñ–£ –¥–ª—è {goal_texts.get(goal, '–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≤–µ—Å–∞')}:\n\n"
        f"üî• –ö–∞–ª–æ—Ä–∏–∏: {kbju_data['calories']} –∫–∫–∞–ª\n"
        f"ü•© –ë–µ–ª–∫–∏: {kbju_data['protein']} –≥\n"
        f"ü•ë –ñ–∏—Ä—ã: {kbju_data['fat']} –≥\n"
        f"üçö –£–≥–ª–µ–≤–æ–¥—ã: {kbju_data['carbs']} –≥\n\n"
        f"üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
        f"‚Ä¢ –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º: {kbju_data['bmr']} –∫–∫–∞–ª\n"
        f"‚Ä¢ –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: {kbju_data['tdee']} –∫–∫–∞–ª\n\n"
        f"üí° –°–æ–≤–µ—Ç—ã:\n"
        f"‚Ä¢ –ü–µ–π—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥—ã\n"
        f"‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ\n"
        f"‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Å–≤–æ—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n\n"
        f"‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞."
    )

    await message.answer(response, reply_markup=ReplyKeyboardRemove())
    await state.clear()


@router.message(Command("mydata"))
async def handle_mydata(message: types.Message):
    user_data = db.get_user(message.from_user.id)

    if not user_data:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
        return

    response = (
        f"üìã –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"üìè –†–æ—Å—Ç: {user_data['height']} —Å–º\n"
        f"‚öñÔ∏è –í–µ—Å: {user_data['weight']} –∫–≥\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']} –ª–µ—Ç\n"
        f"üöª –ü–æ–ª: {user_data['gender']}\n"
        f"üéØ –¶–µ–ª—å: {user_data['goal']}\n\n"
        f"–î–ª—è –Ω–æ–≤—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –ö–ë–ñ–£"
    )

    await message.answer(response)


@router.callback_query(F.data == DOWN)
async def handle_down(callback_query: CallbackQuery):
    await callback_query.answer(text="–•–£–î–ï–ô")



@router.message(Command("action", prefix="/!"))
async def handle_actions(message: types.Message):
    markup = create_action_kb()
    await message.answer(
        text= "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏: ",
        reply_markup=markup,
    )


@router.message(Command("help"))
async def handle_help(message: types.Message):
    text = markdown.text(
        "ü§ñFitnes\\-Bot —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å\\-—Ç—Ä–µ–∫–µ—Ä\\!",
        "–†–∞—Å—Å—á–∏—Ç–∞—é –∫–∞–ª–æ—Ä–∏–∏ –∏ –ë–ñ–£\\, —Å–æ—Å—Ç–∞–≤–ª—é –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –ø–∏—Ç–∞–Ω–∏—è –ø–æ–¥ —Ç–≤–æ—é —Ü–µ–ª—å\\:",
        markdown.text(
            markdown.bold("‚úÖ–ü–æ—Ö—É–¥–µ–Ω–∏–µ")
        ),
        markdown.text(
            markdown.bold("‚úÖ–ù–∞–±–æ—Ä –º–∞—Å—Å—ã")
        ),
        markdown.text(
            markdown.bold("‚úÖ–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞")
        ),
        "–í—Å—ë –ø—Ä–æ—Å—Ç–æ\\, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ\\. –ù–∞—á–Ω–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\\!üí™",
        sep="\n"
    )
    await message.bot.send_chat_action(
        chat_id=message.chat.id,
        action= ChatAction.TYPING,
    ) # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—É –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
    await message.answer(text=text, parse_mode=ParseMode.MARKDOWN_V2)
